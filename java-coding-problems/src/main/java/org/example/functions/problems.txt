185. Working with mapMulti(): Explain and exemplify the JDK 16 mapMulti(). Provide a brief introduction,
explain how it works in comparison with flatMap(), and point out when mapMulti() is a good fit.

186. Streaming custom code to map: Imagine a class that shapes some blog posts. Each post is identified by a
unique integer ID, and the post has several properties, including its tags. The tags of each post are actually
represented as a string of tags separated by a hashtag (#). Whenever we need the list of tags for a given post,
we can call the allTags() helper method. Our goal is to write a stream pipeline that extracts from this list of tags
a Map<String, List<Integer>> containing, for each tag (key), the list of posts (value).
- MapExampleSpec

187. Exemplifying a method reference vs. a lambda: Write a relevant snippet of code to highlight the difference in behavior
between a method reference and the equivalent lambda expression.

188. Hooking lambda laziness via Supplier/Consumer: Write a Java program that highlights how Supplier/Consumer works.
In this context, point out the lazy characteristic of lambdas.

189. Writing a Function<String, T> to parse data: Imagine a given text (test, a, 1, 4, 5, 0xf5, 0x5, 4.5d, 6, 5.6, 50000,
345, 4.0f, 6$3, 2$1.1, 5.5, 6.7, 8, a11, 3e+1, -11199, 55). Write an application that exposes a Function<String, T>
capable of parsing this text, and extract only doubles, integers, longs, and so on.

190. Filtering nested collections with Streams: Imagine that you have two nested collections. Provide several stream
pipeline examples to filter data from the inner collection.

191. Using BiPredicate: Exemplify the usage of BiPredicate.

192. Building a dynamic predicate for a custom model: Write an application capable of dynamically generating predicates
(Predicate) based on some simple inputs.

193. Building a dynamic predicate from a custom map of conditions: Consider having a map of conditions (the map’s key
is a field, and the map’s value is the expected value for that field). In this context, write an application that
dynamically generates the proper predicate.

194. Logging in predicates: Write a custom solution that allows us to log failures in predicates.

195. Extending Stream with containsAll() and containsAny(): Provide a solution that extends the Java Stream API with
two final operations named containsAll() and containsAny().

196. Logging in predicates: Write a custom solution that allows us to log failures in predicates.

197. Extending Stream with containsAll() and containsAny(): Provide a solution that extends the Java Stream API with
two final operations named containsAll() and containsAny().

198. Extending Stream with removeAll() and retainAll(): Provide a solution that extends the Java Stream API with two
final operations named removeAll() and retainAll().

199. Introducing stream comparators: Provide a detailed covering (with examples) of using stream comparators.

200. Sorting a map: Write several snippets of code to highlight different use cases for sorting a map.
- StreamComparatorsExampleSpec

201. Filtering a map: Write several snippets of code to highlight different use cases for filtering a map.
- MapExampleSpec

202. Creating a custom collector via Collector.of(): Write an arbitrarily chosen set of custom collectors via the Collector.of() API.
- CollectorExampleSpec

203. Throwing checked exceptions from lambdas

104. Implementing distinctBy() for the Stream API: Write a Java application that implements the distinctBy() stream intermediate operation. This is like the built-in distinct(), only it allows us to filter distinct elements by a given property/field.







